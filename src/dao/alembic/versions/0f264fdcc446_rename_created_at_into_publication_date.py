"""Rename created_at into publication_date

Revision ID: 0f264fdcc446
Revises: e6d40d095fba
Create Date: 2025-10-22 12:40:07.070702

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# revision identifiers, used by Alembic.
revision: str = '0f264fdcc446'
down_revision: Union[str, Sequence[str], None] = 'e6d40d095fba'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if we need to do the migration
    # (handle case where publication_date already exists from failed migration)
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('articles')]
    
    if 'publication_date' in columns and 'created_at' in columns:
        # Both exist, just copy data and drop created_at
        op.execute('UPDATE articles SET publication_date = created_at WHERE publication_date IS NULL')
        with op.batch_alter_table('articles', schema=None) as batch_op:
            batch_op.alter_column('publication_date', nullable=False)
            batch_op.drop_column('created_at')
    elif 'created_at' in columns and 'publication_date' not in columns:
        # Normal case: rename created_at to publication_date
        with op.batch_alter_table('articles', schema=None) as batch_op:
            batch_op.add_column(sa.Column('publication_date', sa.Date(), nullable=True))
        
        op.execute('UPDATE articles SET publication_date = created_at')
        
        with op.batch_alter_table('articles', schema=None) as batch_op:
            batch_op.alter_column('publication_date', nullable=False)
            batch_op.drop_column('created_at')
    # else: migration already complete

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('articles', schema=None) as batch_op:
        # First add the old column as nullable
        batch_op.add_column(sa.Column('created_at', sa.DATE(), nullable=True))
    
    # Copy data from publication_date back to created_at
    op.execute('UPDATE articles SET created_at = publication_date')
    
    # Now make it NOT NULL and drop the new column
    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.alter_column('created_at', nullable=False)
        batch_op.drop_column('publication_date')

    # ### end Alembic commands ###
