Generic single-database configuration.

# Alembic Migrations

This folder contains Alembic migration scripts for managing your database schema.

## Structure

- `env.py` — Alembic configuration and environment setup.
- `script.py.mako` — Template for new migration scripts.
- `versions/` — Individual migration scripts (one per schema change).
- `README` — This file.

## ⚠️ IMPORTANT: First-Time Setup

When you first clone this repository, **the database does NOT exist yet**. You must create it using Alembic migrations.

### Step 1: Configure Your Database

Edit `.env` file in the project root:

```env
# For SQLite (development)
DATABASE_URL=sqlite:///dev.db
ASYNC_DATABASE_URL=sqlite+aiosqlite:///dev.db

# For PostgreSQL (production)
# DATABASE_URL=postgresql://user:password@localhost/dbname
# ASYNC_DATABASE_URL=postgresql+asyncpg://user:password@localhost/dbname
```

### Step 2: Create the Database and Tables

Run this command from the project root:

```bash
alembic upgrade head
```

**What this does:**

- Creates the database file (for SQLite) or connects to PostgreSQL
- Creates all tables defined in `src/dao/models/` (users, articles, reviews)
- Applies all migration scripts in order from `versions/` folder
- Sets up the schema to match your models

**After running this command**, you will have:

- `dev.db` file (if using SQLite)
- All tables: `reposting_bot_users`, `articles`, `reviews`
- Database ready to use with the bot

## Usage

### 1. **Initialize Alembic (already done):**

```bash
alembic init dao/alembic
```

### 2. **Create a new migration:**

```bash
alembic revision --autogenerate -m "Describe your change"
```

### 3. **Apply migrations to the database:**

```bash
alembic upgrade head
```

### 4. **Downgrade (undo) the last migration:**

```bash
alembic downgrade -1
```

## Configuration

- Alembic reads the database URL from your environment variables (see `env.py`).
- Make sure your models are imported in `env.py` so Alembic can detect changes.
- The database file/connection is automatically created when you run `alembic upgrade head`

## Common Workflows

### Starting Fresh (New Clone)

```bash
# 1. Configure .env with database URL
# 2. Create database and all tables
alembic upgrade head
```

### Adding a New Model/Field

```bash
# 1. Modify models in src/dao/models/
# 2. Generate migration
alembic revision --autogenerate -m "Add new field to User model"
# 3. Review generated migration in versions/
# 4. Apply migration
alembic upgrade head
```

### Checking Database Status

```bash
# View current migration version
alembic current

# View all migrations
alembic history

# View pending migrations
alembic history --verbose
```

## Tips

- **The database is NOT created automatically by the code** - you must run `alembic upgrade head`
- Always review autogenerated migrations before applying
- Keep migration messages clear and descriptive
- Use `alembic history` to view migration history
- Test migrations in development before applying to production
- Backup your database before running migrations in production

## Troubleshooting

### Error: "No such table"

**Solution:** Run `alembic upgrade head` to create all tables

### Error: "Database not found"

**Solution:**

- For SQLite: Run `alembic upgrade head` (creates the file automatically)
- For PostgreSQL: Create the database first: `createdb dbname`, then run `alembic upgrade head`

### Error: "Target database is not up to date"

**Solution:** Run `alembic upgrade head` to apply pending migrations

## Documentation

- [Alembic Documentation](https://alembic.sqlalchemy.org/en/latest/)
- [Project Database Guide](../../docs/database_guide.md) - Comprehensive database documentation

